name: check-version-tag

on:
  pull_request:
    branches: [ "master", "main" ]
    paths-ignore: [ "docs/**" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-version:
    name: Check version.
    runs-on: "ubuntu-latest"

    steps:
      - uses: actions/checkout@v4.2.2

      - name: Set up Python
        uses: actions/setup-python@v6.0.0
        with:
          python-version: "3.12"

      - name: Install hatch
        run: python -m pip install --upgrade hatch

      - name: Get version
        id: get-version
        run: |
          export VERSION=v`hatch version`
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version set to ${VERSION}"

      - name: Check that version doesn't exist
        id: check-release
        run: |
            echo "Checking version ${VERSION}"

            export CHECK=$(gh release list \
            --repo ${{ github.repository }} \
            --json tagName \
            --exclude-drafts \
            --jq "map(select(.tagName == \"${VERSION}\"))|length" \
            )
            echo "Found ${CHECK} releases"

            if [ $CHECK -gt 0 ]; then
            echo "Release already exists for version ${VERSION}"
            exit 1
            fi
        env:
            VERSION: ${{ steps.get-version.outputs.version }}
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check that tag doesn't exist
        id: check-tag
        run: |
            echo "Checking tag for version ${VERSION}"

            # Query the API for this tag.
            export CHECK=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/tags \
            --jq "map(select(.name  == \"${VERSION}\"))|length" \
            )
            echo "Found ${CHECK} tags"

            if [ $CHECK -gt 0 ]; then
            echo "Tag already exists for version ${VERSION}"
            exit 1
            fi
        env:
            VERSION: ${{ steps.get-version.outputs.version }}
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

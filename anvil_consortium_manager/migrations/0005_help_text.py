# Generated by Django 3.2.12 on 2023-01-07 00:55

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('anvil_consortium_manager', '0004_add_note_field'),
    ]

    operations = [
        migrations.AlterField(
            model_name='account',
            name='email',
            field=models.EmailField(help_text='Email associated with this account on AnVIL.', max_length=254, unique=True),
        ),
        migrations.AlterField(
            model_name='account',
            name='is_service_account',
            field=models.BooleanField(help_text='Indicator of whether this Account is a service account.'),
        ),
        migrations.AlterField(
            model_name='account',
            name='user',
            field=models.OneToOneField(blank=True, help_text='User linked to this AnVIL account.', null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='account',
            name='uuid',
            field=models.UUIDField(default=uuid.uuid4, help_text='UUID for use in urls.'),
        ),
        migrations.AlterField(
            model_name='account',
            name='verified_email_entry',
            field=models.OneToOneField(blank=True, help_text='The UserEmailEntry object used to verify the email,\n        if the account was created by a user linking their email.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='verified_account', to='anvil_consortium_manager.useremailentry'),
        ),
        migrations.AlterField(
            model_name='billingproject',
            name='has_app_as_user',
            field=models.BooleanField(help_text='Indicator of whether the app is a user in this BillingProject.'),
        ),
        migrations.AlterField(
            model_name='billingproject',
            name='name',
            field=models.SlugField(help_text='Name of the Billing Project on AnVIL.', max_length=64, unique=True),
        ),
        migrations.AlterField(
            model_name='historicalaccount',
            name='email',
            field=models.EmailField(db_index=True, help_text='Email associated with this account on AnVIL.', max_length=254),
        ),
        migrations.AlterField(
            model_name='historicalaccount',
            name='is_service_account',
            field=models.BooleanField(help_text='Indicator of whether this Account is a service account.'),
        ),
        migrations.AlterField(
            model_name='historicalaccount',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='User linked to this AnVIL account.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='historicalaccount',
            name='uuid',
            field=models.UUIDField(default=uuid.uuid4, help_text='UUID for use in urls.'),
        ),
        migrations.AlterField(
            model_name='historicalaccount',
            name='verified_email_entry',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='The UserEmailEntry object used to verify the email,\n        if the account was created by a user linking their email.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='anvil_consortium_manager.useremailentry'),
        ),
        migrations.AlterField(
            model_name='historicalbillingproject',
            name='has_app_as_user',
            field=models.BooleanField(help_text='Indicator of whether the app is a user in this BillingProject.'),
        ),
        migrations.AlterField(
            model_name='historicalbillingproject',
            name='name',
            field=models.SlugField(help_text='Name of the Billing Project on AnVIL.', max_length=64),
        ),
        migrations.AlterField(
            model_name='historicalmanagedgroup',
            name='is_managed_by_app',
            field=models.BooleanField(default=True, help_text='Indicator of whether this group is managed by the app.'),
        ),
        migrations.AlterField(
            model_name='historicalmanagedgroup',
            name='name',
            field=models.SlugField(help_text='Name of the group on AnVIL.', max_length=64),
        ),
        migrations.AlterField(
            model_name='historicalworkspace',
            name='billing_project',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='Billing project associated with this Workspace.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='anvil_consortium_manager.billingproject'),
        ),
        migrations.AlterField(
            model_name='historicalworkspace',
            name='name',
            field=models.SlugField(help_text='Name of the workspace on AnVIL, not including billing project name.', max_length=64),
        ),
        migrations.AlterField(
            model_name='historicalworkspace',
            name='note',
            field=models.TextField(blank=True, help_text='Additional notes.'),
        ),
        migrations.AlterField(
            model_name='historicalworkspace',
            name='workspace_type',
            field=models.CharField(help_text='Workspace data type as indicated by an adapter.', max_length=255),
        ),
        migrations.AlterField(
            model_name='historicalworkspaceauthorizationdomain',
            name='group',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='Group used as an authorization domain.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='anvil_consortium_manager.managedgroup'),
        ),
        migrations.AlterField(
            model_name='historicalworkspaceauthorizationdomain',
            name='workspace',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='Workspace for which this group is an authorization domain.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='anvil_consortium_manager.workspace'),
        ),
        migrations.AlterField(
            model_name='historicalworkspacegroupsharing',
            name='access',
            field=models.CharField(choices=[('OWNER', 'Owner'), ('WRITER', 'Writer'), ('READER', 'Reader')], default='READER', help_text='Access level that this ManagedGroup has to this Workspace.\n            A "Reader" can see data int the workspace.\n            A "Writer" can add or remove data in the workspace.\n            An "Owner" can share the workspace with others or delete the workspace.', max_length=10),
        ),
        migrations.AlterField(
            model_name='historicalworkspacegroupsharing',
            name='can_compute',
            field=models.BooleanField(default=False, help_text='Indicator of whether the group is able to perform compute in this workspace.\n        "READERS" cannot be granted compute permission.', verbose_name='Allow compute in this workspace?'),
        ),
        migrations.AlterField(
            model_name='historicalworkspacegroupsharing',
            name='group',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='ManagedGroup that has access to this Workspace.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='anvil_consortium_manager.managedgroup'),
        ),
        migrations.AlterField(
            model_name='historicalworkspacegroupsharing',
            name='workspace',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='Workspace that the ManagedGroup has access to.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='anvil_consortium_manager.workspace'),
        ),
        migrations.AlterField(
            model_name='managedgroup',
            name='is_managed_by_app',
            field=models.BooleanField(default=True, help_text='Indicator of whether this group is managed by the app.'),
        ),
        migrations.AlterField(
            model_name='managedgroup',
            name='name',
            field=models.SlugField(help_text='Name of the group on AnVIL.', max_length=64, unique=True),
        ),
        migrations.AlterField(
            model_name='workspace',
            name='authorization_domains',
            field=models.ManyToManyField(blank=True, help_text='Authorization domain(s) for this workspace.', through='anvil_consortium_manager.WorkspaceAuthorizationDomain', to='anvil_consortium_manager.ManagedGroup'),
        ),
        migrations.AlterField(
            model_name='workspace',
            name='billing_project',
            field=models.ForeignKey(help_text='Billing project associated with this Workspace.', on_delete=django.db.models.deletion.PROTECT, to='anvil_consortium_manager.billingproject'),
        ),
        migrations.AlterField(
            model_name='workspace',
            name='name',
            field=models.SlugField(help_text='Name of the workspace on AnVIL, not including billing project name.', max_length=64),
        ),
        migrations.AlterField(
            model_name='workspace',
            name='note',
            field=models.TextField(blank=True, help_text='Additional notes.'),
        ),
        migrations.AlterField(
            model_name='workspace',
            name='workspace_type',
            field=models.CharField(help_text='Workspace data type as indicated by an adapter.', max_length=255),
        ),
        migrations.AlterField(
            model_name='workspaceauthorizationdomain',
            name='group',
            field=models.ForeignKey(help_text='Group used as an authorization domain.', on_delete=django.db.models.deletion.PROTECT, to='anvil_consortium_manager.managedgroup'),
        ),
        migrations.AlterField(
            model_name='workspaceauthorizationdomain',
            name='workspace',
            field=models.ForeignKey(help_text='Workspace for which this group is an authorization domain.', on_delete=django.db.models.deletion.CASCADE, to='anvil_consortium_manager.workspace'),
        ),
        migrations.AlterField(
            model_name='workspacegroupsharing',
            name='access',
            field=models.CharField(choices=[('OWNER', 'Owner'), ('WRITER', 'Writer'), ('READER', 'Reader')], default='READER', help_text='Access level that this ManagedGroup has to this Workspace.\n            A "Reader" can see data int the workspace.\n            A "Writer" can add or remove data in the workspace.\n            An "Owner" can share the workspace with others or delete the workspace.', max_length=10),
        ),
        migrations.AlterField(
            model_name='workspacegroupsharing',
            name='can_compute',
            field=models.BooleanField(default=False, help_text='Indicator of whether the group is able to perform compute in this workspace.\n        "READERS" cannot be granted compute permission.', verbose_name='Allow compute in this workspace?'),
        ),
        migrations.AlterField(
            model_name='workspacegroupsharing',
            name='group',
            field=models.ForeignKey(help_text='ManagedGroup that has access to this Workspace.', on_delete=django.db.models.deletion.PROTECT, to='anvil_consortium_manager.managedgroup'),
        ),
        migrations.AlterField(
            model_name='workspacegroupsharing',
            name='workspace',
            field=models.ForeignKey(help_text='Workspace that the ManagedGroup has access to.', on_delete=django.db.models.deletion.CASCADE, to='anvil_consortium_manager.workspace'),
        ),
    ]
